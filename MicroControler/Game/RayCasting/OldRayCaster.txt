public void DrawRays3D()
        {
            int mx, my, mp, dof; float rx = 0, ry = 0, ra, xo = 0, yo = 0, disT = 0;
            ra = player.Rotation - MathHelper.DegreesToRadians(fov/2); if(ra < 0) { ra += 2f * (float)Math.PI; } if(ra > 2 * (float)Math.PI) { ra -= 2 * (float)Math.PI; }
            for (int i = 0; i < fov / rayNumber; i++)
            {
                // Check Horizontal Lines
                dof = 0;
                float distH = 1000000, hx=player.Position.X, hy=player.Position.Y;
                float aTan = (float)(-1 / Math.Tan(ra));
                if (ra > Math.PI) { ry = (((int)player.Position.Y >> 6) << 6) - 0.0001f; rx = (player.Position.Y - ry) * aTan + player.Position.X; yo = -64; xo = -yo * aTan; } // Looking up
                if (ra < Math.PI) { ry = (((int)player.Position.Y >> 6) << 6) + 64; rx = (player.Position.Y - ry) * aTan + player.Position.X; yo = 64; xo = -yo * aTan; } // Looking up
                if (ra == 0 || ra == Math.PI) { rx = player.Position.X; ry = player.Position.Y; dof = 8; } // Looking straight left or right
                while (dof < 8)
                {
                    mx = (int)(rx) >> 6; my = (int)(ry) >> 6; mp = my * map.Data.GetLength(0) + mx;
                    if (mp > 0 && mp < map.Data.GetLength(0) * map.Data.GetLength(1) && map.GetValueFromData(mp) == 1) { hx = rx; hy = ry; distH = MathHelper.DistanceTriangleHypotenuse(player.Position, hx, hy); dof = 8; }
                    else { rx += xo; ry += yo; dof++; }
                }
                
                // Check Vertical Lines
                dof = 0;
                float distV = 1000000, vx = player.Position.X, vy = player.Position.Y;
                float nTan = (float)(-Math.Tan(ra));
                if (ra > P2 && ra < P3) { rx = (((int)player.Position.X >> 6) << 6) - 0.0001f; ry = (player.Position.X - rx) * nTan + player.Position.Y; xo = -64; yo = -xo * nTan; } // Looking left
                if (ra < P2 || ra > P3) { rx = (((int)player.Position.X >> 6) << 6) + 64; ry = (player.Position.X - rx) * nTan + player.Position.Y; xo = 64; yo = -xo * nTan; } // Looking right
                if (ra == 0 || ra == Math.PI) { rx = player.Position.X; ry = player.Position.Y; dof = 8; } // Looking up left or down 
                while (dof < 8)
                {
                    mx = (int)(rx) >> 6; my = (int)(ry) >> 6; mp = my * map.Data.GetLength(0) + mx;
                    if (mp > 0 && mp < map.Data.GetLength(0) * map.Data.GetLength(1) && map.GetValueFromData(mp) == 1) { vx = rx; vy = ry; distV = MathHelper.DistanceTriangleHypotenuse(player.Position, vx, vy); dof = 8; }
                    else { rx += xo; ry += yo; dof++; }
                }
                if (distV < distH) { rx = vx; ry = vy; disT = distV; lineColor = lineColorBright; }
                if (distV > distH) { rx = hx; ry = hy; disT = distH; lineColor = lineColorDark; }
                Line verticalLine = new Line(player.Position, new Vector2f(rx, ry)) { OutlineColor = Color.Red, OutlineThickness = 0.1f }; verticalLine.Draw(this.Window);

                // Draw 3D Walls
                float ca = player.Rotation - ra; if (ca < 0) { ca += 2f * (float)Math.PI; } if (ca > 2 * (float)Math.PI) { ca -= 2 * (float)Math.PI; } disT = disT * (float)Math.Cos(ca);
                float lineH = (map.SquareSize * screenSize3D.X) / disT; if(lineH > 320) { lineH = 320; }
                float lineO = (screenSize3D.X / 2) - lineH / 2;
                Line line3d = new Line(new Vector2f(i * accuracy + 530, lineO), new Vector2f(i * accuracy + 530, lineH + lineO)) { OutlineThickness = accuracy, OutlineColor = lineColor };
                line3d.Draw(this.Window);
                ra += MathHelper.DegreesToRadians(rayNumber); if (ra < 0) { ra += 2f * (float)Math.PI; } if (ra > 2 * (float)Math.PI) { ra -= 2 * (float)Math.PI; }
            }
        }